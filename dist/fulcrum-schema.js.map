{"version":3,"sources":["../src/fulcrum-schema.js"],"names":["require","Postgres","sqldiff","SQLite","SchemaDiffer","instance","Function","dialect","version","oldForm","newForm","tableSchema","tablePrefix","includeMetadata","generateSQL","differ","Generator","postgres","sqlite","quote","meta","Metadata","schema","includeColumns","generator","afterTransform","build","bind","generate","compareOrganization","oldSchema","newSchema","oldOrganization","OrganizationSchema","OrganizationSchemaV2","newOrganization","compareFormSchemas","options","v1","FormSchemaV1","v2","FormSchemaV2","Schema","err","Error","stack","toString","compareForms","module","exports"],"mappings":"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","sourcesContent":["require('@babel/polyfill');\n\nimport OrganizationSchema from './organization-schema';\nimport Schema from './schema';\nimport OrganizationSchemaV2 from './schemas/postgres-schema';\nimport FormSchemaV1 from './schemas/v1';\nimport FormSchemaV2 from './schemas/v2';\nimport Metadata from './metadata';\nimport sqldiff from 'sqldiff';\n\nconst { Postgres, SQLite, SchemaDiffer } = sqldiff;\n\nconst instance = Function('return this')(); // eslint-disable-line no-new-func\n\ninstance.dialect = 'postgres';\ninstance.version = 'v2';\ninstance.oldForm = null;\ninstance.newForm = null;\ninstance.tableSchema = null;\ninstance.tablePrefix = null;\ninstance.includeMetadata = false;\n\nfunction generateSQL(differ, { includeMetadata, dialect, tablePrefix, tableSchema }) {\n  const Generator = {\n    postgres: Postgres,\n    sqlite: SQLite\n  }[dialect];\n\n  const quote = {\n    postgres: '\"',\n    sqlite: '`'\n  }[dialect];\n\n  const meta = new Metadata(differ, { quote, schema: tableSchema, includeColumns: true });\n\n  const generator = new Generator(differ, { afterTransform: includeMetadata ? meta.build.bind(meta) : null });\n\n  generator.tableSchema = tableSchema || '';\n  generator.tablePrefix = tablePrefix || '';\n\n  return generator.generate();\n}\n\ninstance.compareOrganization = () => {\n  let oldSchema = null;\n  let newSchema = null;\n\n  if (instance.oldOrganization) {\n    oldSchema = new OrganizationSchema(OrganizationSchemaV2);\n  }\n\n  if (instance.newOrganization) {\n    newSchema = new OrganizationSchema(OrganizationSchemaV2);\n  }\n\n  const differ = new SchemaDiffer(oldSchema, newSchema);\n\n  return generateSQL(differ, {\n    version: instance.version,\n    dialect: instance.dialect,\n    tableSchema: instance.tableSchema,\n    tablePrefix: instance.tablePrefix,\n    includeMetadata: true\n  });\n};\n\ninstance.compareFormSchemas = (oldForm, newForm, options = {}) => {\n  try {\n    let oldSchema = null;\n    let newSchema = null;\n\n    const schema = {\n      v1: FormSchemaV1,\n      v2: FormSchemaV2\n    }[options.version];\n\n    if (oldForm) {\n      oldSchema = new Schema(oldForm, schema, null);\n    }\n\n    if (newForm) {\n      newSchema = new Schema(newForm, schema, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    return generateSQL(differ, options);\n  } catch (err) {\n    throw new Error(err.stack.toString());\n  }\n};\n\ninstance.compareForms = () => {\n  return instance.compareFormSchemas(\n    instance.oldForm,\n    instance.newForm,\n    {\n      version: instance.version,\n      dialect: instance.dialect,\n      tableSchema: instance.tableSchema,\n      tablePrefix: instance.tablePrefix,\n      includeMetadata: instance.includeMetadata\n    }\n  );\n};\n\nmodule.exports = instance;\n"],"file":"fulcrum-schema.js"}