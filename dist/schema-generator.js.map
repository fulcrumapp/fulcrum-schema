{"version":3,"sources":["../src/schema-generator.js"],"names":["require","Postgres","sqldiff","Sqlite","SchemaDiffer","instance","Function","dialect","version","oldForm","newForm","tableSchema","tablePrefix","includeMetadata","generateSQL","differ","Generator","postgres","sqlite","quote","meta","Metadata","schema","includeColumns","generator","afterTransform","build","bind","generate","compareOrganization","oldSchema","newSchema","oldOrganization","OrganizationSchema","OrganizationSchemaV2","newOrganization","compareFormSchemas","options","v1","FormSchemaV1","v2","FormSchemaV2","Schema","err","Error","stack","toString","compareForm","module","exports"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AARAA,QAAQ,gBAAR;;IAUQC,Q,GAAmCC,iB,CAAnCD,Q;IAAUE,M,GAAyBD,iB,CAAzBC,M;IAAQC,Y,GAAiBF,iB,CAAjBE,Y;;;AAE1B,IAAMC,WAAWC,SAAS,aAAT,GAAjB,C,CAA4C;;AAE5CD,SAASE,OAAT,GAAmB,UAAnB;AACAF,SAASG,OAAT,GAAmB,IAAnB;AACAH,SAASI,OAAT,GAAmB,IAAnB;AACAJ,SAASK,OAAT,GAAmB,IAAnB;AACAL,SAASM,WAAT,GAAuB,IAAvB;AACAN,SAASO,WAAT,GAAuB,IAAvB;AACAP,SAASQ,eAAT,GAA2B,KAA3B;;AAEA,SAASC,WAAT,CAAqBC,MAArB,QAAqF;AAAA,MAAtDF,eAAsD,QAAtDA,eAAsD;AAAA,MAArCN,OAAqC,QAArCA,OAAqC;AAAA,MAA5BK,WAA4B,QAA5BA,WAA4B;AAAA,MAAfD,WAAe,QAAfA,WAAe;;AACnF,MAAMK,YAAY;AAChBC,cAAUhB,QADM;AAEhBiB,YAAQf;AAFQ,IAGhBI,OAHgB,CAAlB;;AAKA,MAAMY,QAAQ;AACZF,cAAU,GADE;AAEZC,YAAQ;AAFI,IAGZX,OAHY,CAAd;;AAKA,MAAMa,OAAO,IAAIC,kBAAJ,CAAaN,MAAb,EAAqB,EAAEI,YAAF,EAASG,QAAQX,WAAjB,EAA8BY,gBAAgB,IAA9C,EAArB,CAAb;;AAEA,MAAMC,YAAY,IAAIR,SAAJ,CAAcD,MAAd,EAAsB,EAAEU,gBAAgBZ,kBAAkBO,KAAKM,KAAL,CAAWC,IAAX,CAAgBP,IAAhB,CAAlB,GAA0C,IAA5D,EAAtB,CAAlB;;AAEAI,YAAUb,WAAV,GAAwBA,eAAe,EAAvC;AACAa,YAAUZ,WAAV,GAAwBA,eAAe,EAAvC;;AAEA,SAAOY,UAAUI,QAAV,EAAP;AACD;;AAEDvB,SAASwB,mBAAT,GAA+B,YAAM;AACnC,MAAIC,YAAY,IAAhB;AACA,MAAIC,YAAY,IAAhB;;AAEA,MAAI1B,SAAS2B,eAAb,EAA8B;AAC5BF,gBAAY,IAAIG,4BAAJ,CAAuBC,wBAAvB,CAAZ;AACD;;AAED,MAAI7B,SAAS8B,eAAb,EAA8B;AAC5BJ,gBAAY,IAAIE,4BAAJ,CAAuBC,wBAAvB,CAAZ;AACD;;AAED,MAAMnB,SAAS,IAAIX,YAAJ,CAAiB0B,SAAjB,EAA4BC,SAA5B,CAAf;;AAEA,SAAOjB,YAAYC,MAAZ,EAAoB,IAApB,CAAP;AACD,CAfD;;AAiBAV,SAAS+B,kBAAT,GAA8B,UAAC3B,OAAD,EAAUC,OAAV,EAAoC;AAAA,MAAjB2B,OAAiB,uEAAP,EAAO;;AAChE,MAAI;AACF,QAAIP,YAAY,IAAhB;AACA,QAAIC,YAAY,IAAhB;;AAEA,QAAMT,SAAS;AACbgB,UAAIC,WADS;AAEbC,UAAIC;AAFS,KAAf;;AAKA,QAAIhC,OAAJ,EAAa;AACXqB,kBAAY,IAAIY,gBAAJ,CAAWjC,OAAX,EAAoBa,MAApB,EAA4B,IAA5B,CAAZ;AACD;;AAED,QAAIZ,OAAJ,EAAa;AACXqB,kBAAY,IAAIW,gBAAJ,CAAWhC,OAAX,EAAoBY,MAApB,EAA4B,IAA5B,CAAZ;AACD;;AAED,QAAMP,SAAS,IAAIX,YAAJ,CAAiB0B,SAAjB,EAA4BC,SAA5B,CAAf;;AAEA,WAAOjB,YAAYC,MAAZ,EAAoBsB,OAApB,CAAP;AACD,GApBD,CAoBE,OAAOM,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,IAAIE,KAAJ,CAAUC,QAAV,EAAV,CAAN;AACD;AACF,CAxBD;;AA0BAzC,SAAS0C,WAAT,GAAuB,YAAM;AAC3B,SAAO1C,SAAS+B,kBAAT,CACL/B,SAASI,OADJ,EAELJ,SAASK,OAFJ,EAGL;AACEH,aAASF,SAASE,OADpB;AAEEI,iBAAaN,SAASM,WAFxB;AAGEC,iBAAaP,SAASO,WAHxB;AAIEC,qBAAiBR,SAASQ;AAJ5B,GAHK,CAAP;AAUD,CAXD;;AAaAmC,OAAOC,OAAP,GAAiB5C,QAAjB","file":"schema-generator.js","sourcesContent":["require('babel-polyfill');\n\nimport OrganizationSchema from './organization-schema';\nimport Schema from './schema';\nimport OrganizationSchemaV2 from './schemas/postgres-schema';\nimport FormSchemaV1 from './schemas/v1';\nimport FormSchemaV2 from './schemas/v2';\nimport Metadata from './metadata';\nimport sqldiff from 'sqldiff';\n\nconst { Postgres, Sqlite, SchemaDiffer } = sqldiff;\n\nconst instance = Function('return this')(); // eslint-disable-line no-new-func\n\ninstance.dialect = 'postgres';\ninstance.version = 'v2';\ninstance.oldForm = null;\ninstance.newForm = null;\ninstance.tableSchema = null;\ninstance.tablePrefix = null;\ninstance.includeMetadata = false;\n\nfunction generateSQL(differ, { includeMetadata, dialect, tablePrefix, tableSchema }) {\n  const Generator = {\n    postgres: Postgres,\n    sqlite: Sqlite\n  }[dialect];\n\n  const quote = {\n    postgres: '\"',\n    sqlite: '`'\n  }[dialect];\n\n  const meta = new Metadata(differ, { quote, schema: tableSchema, includeColumns: true });\n\n  const generator = new Generator(differ, { afterTransform: includeMetadata ? meta.build.bind(meta) : null });\n\n  generator.tableSchema = tableSchema || '';\n  generator.tablePrefix = tablePrefix || '';\n\n  return generator.generate();\n}\n\ninstance.compareOrganization = () => {\n  let oldSchema = null;\n  let newSchema = null;\n\n  if (instance.oldOrganization) {\n    oldSchema = new OrganizationSchema(OrganizationSchemaV2);\n  }\n\n  if (instance.newOrganization) {\n    newSchema = new OrganizationSchema(OrganizationSchemaV2);\n  }\n\n  const differ = new SchemaDiffer(oldSchema, newSchema);\n\n  return generateSQL(differ, true);\n};\n\ninstance.compareFormSchemas = (oldForm, newForm, options = {}) => {\n  try {\n    let oldSchema = null;\n    let newSchema = null;\n\n    const schema = {\n      v1: FormSchemaV1,\n      v2: FormSchemaV2\n    };\n\n    if (oldForm) {\n      oldSchema = new Schema(oldForm, schema, null);\n    }\n\n    if (newForm) {\n      newSchema = new Schema(newForm, schema, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    return generateSQL(differ, options);\n  } catch (err) {\n    throw new Error(err.stack.toString());\n  }\n};\n\ninstance.compareForm = () => {\n  return instance.compareFormSchemas(\n    instance.oldForm,\n    instance.newForm,\n    {\n      dialect: instance.dialect,\n      tableSchema: instance.tableSchema,\n      tablePrefix: instance.tablePrefix,\n      includeMetadata: instance.includeMetadata\n    }\n  );\n};\n\nmodule.exports = instance;"]}