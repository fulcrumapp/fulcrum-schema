{"version":3,"sources":["../src/organization-schema.js"],"names":["Table","sqldiff","View","OrganizationSchema","schema","options","buildSchema","tables","tableDefinitions","views","table","ModelClass","definition","defineTable","defineView","defineIndexes","name","buildTable","buildViews","tableDefinition","type","alias","columns","column","systemColumn","_","clone","system","addColumn","indexes","indexDefinition","addIndex","push","replace","view","columnNames","viewColumns","length"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEOA,K,GAAeC,iB,CAAfD,K;IAAOE,I,GAAQD,iB,CAARC,I;;IAEOC,kB;AACnB,8BAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKC,WAAL;AACD;;;;kCAEa;AACZ,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,gBAAL,GAAwB,EAAxB;AACA,WAAKC,KAAL,GAAa,EAAb;;AAHY;AAAA;AAAA;;AAAA;AAKZ,6BAAoB,KAAKL,MAAzB,8HAAiC;AAAA,cAAtBM,KAAsB;;AAC/B,cAAMC,aAAaD,KAAnB;;AAEA,cAAME,aAAa,IAAID,UAAJ,EAAnB;;AAEAC,qBAAWC,WAAX;AACAD,qBAAWE,UAAX;AACAF,qBAAWG,aAAX;;AAEA,eAAKP,gBAAL,CAAsBI,WAAWI,IAAjC,IAAyCJ,UAAzC;;AAEA,eAAKK,UAAL,CAAgBL,UAAhB;AACD;AAjBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBZ,WAAKM,UAAL;AACD;;;+BAEUC,e,EAAiB;AAC1B,UAAMT,QAAQ,IAAIV,KAAJ,CAAUmB,gBAAgBH,IAA1B,EAAgC,IAAhC,EAAsC,EAACI,MAAM,QAAP,EAAiBC,OAAOF,gBAAgBH,IAAxC,EAAtC,CAAd;;AAD0B;AAAA;AAAA;;AAAA;AAG1B,8BAAqBG,gBAAgBG,OAArC,mIAA8C;AAAA,cAAnCC,MAAmC;;AAC5C,cAAMC,eAAeC,qBAAEC,KAAF,CAAQH,MAAR,CAArB;;AAEAC,uBAAaG,MAAb,GAAsB,IAAtB;;AAEAjB,gBAAMkB,SAAN,CAAgBJ,YAAhB;AACD;AATyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAW1B,8BAA8BL,gBAAgBU,OAA9C,mIAAuD;AAAA,cAA5CC,eAA4C;;AACrDpB,gBAAMqB,QAAN,CAAeD,eAAf;AACD;AAbyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe1B,WAAKvB,MAAL,CAAYyB,IAAZ,CAAiBtB,KAAjB;AACD;;;iCAEY;AAAA;AAAA;AAAA;;AAAA;AACX,8BAAoB,KAAKH,MAAzB,mIAAiC;AAAA,cAAtBG,KAAsB;;AAC/B,cAAMW,QAAQX,MAAMM,IAAN,CAAWiB,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAd;;AAEA,cAAMC,OAAO,IAAIhC,IAAJ,CAASmB,QAAQ,OAAjB,EAA0B,IAA1B,EAAgCX,KAAhC,EAAuC,EAACW,YAAD,EAAvC,CAAb;;AAEA,cAAMc,cAAc,EAApB;;AAEA,cAAMvB,aAAa,KAAKJ,gBAAL,CAAsBE,MAAMM,IAA5B,CAAnB;;AAP+B;AAAA;AAAA;;AAAA;AAS/B,kCAAqBN,MAAMY,OAA3B,mIAAoC;AAAA,kBAAzBC,MAAyB;;AAClC,kBAAMF,SAAQT,WAAWwB,WAAX,CAAuBb,OAAOP,IAA9B,CAAd;;AAEA,kBAAIK,UAAS,IAAb,EAAmB;AACjB;AACA;AACD;;AAED,kBAAI,CAACc,YAAYd,MAAZ,CAAL,EAAyB;AACvBa,qBAAKN,SAAL,CAAe,EAACL,QAAQA,MAAT,EAAiBF,OAAOA,MAAxB,EAAf;AACAc,4BAAYd,MAAZ,IAAqBE,MAArB;AACD;AACF;AArB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuB/B,cAAIW,KAAKZ,OAAL,CAAae,MAAjB,EAAyB;AACvB,iBAAK5B,KAAL,CAAWuB,IAAX,CAAgBE,IAAhB;AACD;AACF;AA3BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BZ;;;;;;kBA3EkB/B,kB","file":"organization-schema.js","sourcesContent":["import _ from 'underscore';\nimport sqldiff from 'sqldiff';\n\nconst {Table, View} = sqldiff;\n\nexport default class OrganizationSchema {\n  constructor(schema, options) {\n    this.schema = schema;\n    this.options = options || {};\n    this.buildSchema();\n  }\n\n  buildSchema() {\n    this.tables = [];\n    this.tableDefinitions = {};\n    this.views = [];\n\n    for (const table of this.schema) {\n      const ModelClass = table;\n\n      const definition = new ModelClass();\n\n      definition.defineTable();\n      definition.defineView();\n      definition.defineIndexes();\n\n      this.tableDefinitions[definition.name] = definition;\n\n      this.buildTable(definition);\n    }\n\n    this.buildViews();\n  }\n\n  buildTable(tableDefinition) {\n    const table = new Table(tableDefinition.name, null, {type: 'system', alias: tableDefinition.name});\n\n    for (const column of tableDefinition.columns) {\n      const systemColumn = _.clone(column);\n\n      systemColumn.system = true;\n\n      table.addColumn(systemColumn);\n    }\n\n    for (const indexDefinition of tableDefinition.indexes) {\n      table.addIndex(indexDefinition);\n    }\n\n    this.tables.push(table);\n  }\n\n  buildViews() {\n    for (const table of this.tables) {\n      const alias = table.name.replace(/^query_/, '');\n\n      const view = new View(alias + '_view', null, table, {alias});\n\n      const columnNames = {};\n\n      const definition = this.tableDefinitions[table.name];\n\n      for (const column of table.columns) {\n        const alias = definition.viewColumns[column.name];\n\n        if (alias == null) {\n          // console.log('Skipping ' + table.name + '.' + column.name + ' in view.');\n          continue;\n        }\n\n        if (!columnNames[alias]) {\n          view.addColumn({column: column, alias: alias});\n          columnNames[alias] = column;\n        }\n      }\n\n      if (view.columns.length) {\n        this.views.push(view);\n      }\n    }\n  }\n}\n"]}