{"version":3,"sources":["../src/organization-schema.js"],"names":["Table","sqldiff","View","OrganizationSchema","schema","options","buildSchema","tables","tableDefinitions","views","table","ModelClass","definition","defineTable","defineView","defineIndexes","name","buildTable","buildViews","tableDefinition","type","alias","columns","column","systemColumn","system","addColumn","indexes","indexDefinition","addIndex","push","replace","view","columnNames","columnAlias","viewColumns","length"],"mappings":"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","sourcesContent":["import { clone } from 'lodash';\nimport sqldiff from 'sqldiff';\n\nconst {Table, View} = sqldiff;\n\nexport default class OrganizationSchema {\n  constructor(schema, options) {\n    this.schema = schema;\n    this.options = options || {};\n    this.buildSchema();\n  }\n\n  buildSchema() {\n    this.tables = [];\n    this.tableDefinitions = {};\n    this.views = [];\n\n    for (const table of this.schema) {\n      const ModelClass = table;\n\n      const definition = new ModelClass();\n\n      definition.defineTable();\n      definition.defineView();\n      definition.defineIndexes();\n\n      this.tableDefinitions[definition.name] = definition;\n\n      this.buildTable(definition);\n    }\n\n    this.buildViews();\n  }\n\n  buildTable(tableDefinition) {\n    const table = new Table(tableDefinition.name, null, {type: 'system', alias: tableDefinition.name});\n\n    for (const column of tableDefinition.columns) {\n      const systemColumn = clone(column);\n\n      systemColumn.system = true;\n\n      table.addColumn(systemColumn);\n    }\n\n    for (const indexDefinition of tableDefinition.indexes) {\n      table.addIndex(indexDefinition);\n    }\n\n    this.tables.push(table);\n  }\n\n  buildViews() {\n    for (const table of this.tables) {\n      const alias = table.name.replace(/^query_/, '');\n\n      const view = new View(alias + '_view', null, table, { alias });\n\n      const columnNames = {};\n\n      const definition = this.tableDefinitions[table.name];\n\n      for (const column of table.columns) {\n        const columnAlias = definition.viewColumns[column.name];\n\n        if (columnAlias == null) {\n          // console.log('Skipping ' + table.name + '.' + column.name + ' in view.');\n          continue;\n        }\n\n        if (!columnNames[columnAlias]) {\n          view.addColumn({column: column, alias: columnAlias});\n          columnNames[columnAlias] = column;\n        }\n      }\n\n      if (view.columns.length) {\n        this.views.push(view);\n      }\n    }\n  }\n}\n"],"file":"organization-schema.js"}