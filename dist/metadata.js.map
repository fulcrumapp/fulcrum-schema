{"version":3,"sources":["../src/metadata.js"],"names":[],"mappings":"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","file":"metadata.js","sourcesContent":["// import pgformat from 'pg-format';\nimport {format} from 'util';\nimport Utils from './utils';\nimport sqldiff from 'sqldiff';\n\nfunction pgvalue(value) {\n  if (value == null) {\n    return 'NULL';\n  }\n  return \"'\" + value.toString().replace(/'/g, \"''\") + \"'\";\n}\n\nexport default class Metadata {\n  constructor(diff, options) {\n    this.options = options || {};\n    this.includeColumns = this.options.includeColumns == null ? true : this.options.includeColumns;\n  }\n\n  build(generator, changes) {\n    this.diff = generator.differ;\n    this.changes = changes;\n    this.oldViews = this.diff.oldSchema ? this.diff.oldSchema.views : [];\n    this.oldViews = this.oldViews || [];\n\n    this.newViews = this.diff.newSchema ? this.diff.newSchema.views : [];\n    this.newViews = this.newViews || [];\n\n    if (this.shouldEmitMetadata()) {\n      Array.prototype.push.apply(changes, this.buildStatements());\n    }\n  }\n\n  shouldEmitMetadata() {\n    const oldName = this.diff.oldSchema && this.diff.oldSchema.form ? this.diff.oldSchema.form.name : null;\n    const newName = this.diff.newSchema && this.diff.newSchema.form ? this.diff.newSchema.form.name : null;\n\n    // emit the metadata statements if there are already some changes being emitted or\n    // the form name changed.\n    return (this.changes.length > 0 || oldName !== newName);\n  }\n\n  buildStatements() {\n    const statements = [];\n\n    const systemTablesName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables');\n    const systemTablesViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables_view');\n    const systemColumnsName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns');\n    const systemColumnsViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns_view');\n\n    statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text, alias text, type text, parent text, form_id text);',\n                           systemTablesName));\n\n    statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT alias AS name, type, parent, form_id FROM %s;',\n                           systemTablesViewName, systemTablesName));\n\n    statements.push(format('CREATE INDEX idx_tables_name ON %s (name);',\n                           systemTablesName));\n\n    statements.push(format('CREATE INDEX idx_tables_alias ON %s (alias);',\n                           systemTablesName));\n\n    if (this.includeColumns) {\n      // field type\n      statements.push(format('CREATE TABLE IF NOT EXISTS %s (table_name text, table_alias text, name text, ordinal bigint, type text, nullable boolean, form_id text, field text, field_type text, data_name text, part text, data text);',\n                             systemColumnsName));\n\n      statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT table_alias AS table_name, name, ordinal, type, nullable, form_id, field, field_type, data_name, part FROM %s;',\n                             systemColumnsViewName, systemColumnsName));\n\n      statements.push(format('CREATE INDEX idx_columns_table_name ON %s (table_name);',\n                             systemColumnsName));\n\n      statements.push(format('CREATE INDEX idx_columns_table_alias ON %s (table_alias);',\n                             systemColumnsName));\n    }\n\n    // drop old metadata\n    for (const view of this.oldViews) {\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(view.table.alias)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(view.table.alias)));\n      }\n    }\n\n    // create new metadata\n    for (const view of this.newViews) {\n      const viewName = view.name;\n      const viewAlias = view.alias || view.table.alias;\n      const viewType = view.type || view.table.type;\n\n      // skip the _full and 'values' tables\n      if (viewType === 'values' || view.variant != null) {\n        continue;\n      }\n\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(viewName)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(viewName)));\n      }\n\n      // console.log(view);\n\n      statements.push(format('INSERT INTO %s (name, alias, type, parent, form_id) SELECT %s, %s, %s, %s, %s;',\n                             systemTablesName,\n                             pgvalue(viewName),\n                             pgvalue(viewAlias),\n                             pgvalue(viewType),\n                             pgvalue(view.table.parent ? view.table.parent.alias : null),\n                             pgvalue(view.table.form_id)));\n\n      if (this.includeColumns) {\n        for (let i = 0; i < view.columns.length; ++i) {\n          const column = view.columns[i];\n\n          // statements.push(format('DELETE FROM %s WHERE table_name = %s AND name = %s;',\n          //                        systemColumnsName,\n          //                        pgvalue(viewName),\n          //                        pgvalue(column.alias)));\n\n          let field = null;\n          let fieldType = null;\n          let dataName = null;\n          let part = null;\n          const data = null;\n\n          const element = column.column.element;\n\n          if (element) {\n            field = element.key;\n            fieldType = element.type;\n            dataName = element.data_name;\n            part = column.column.suffix ? column.column.suffix.replace(/^_/, '') : null;\n            // data = JSON.stringify(element);\n          }\n\n          statements.push(format('INSERT INTO %s (table_name, table_alias, name, ordinal, type, nullable, form_id, field, field_type, data_name, part, data)\\n' +\n                                 'SELECT %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s;',\n                                 systemColumnsName,\n                                 pgvalue(viewName),\n                                 pgvalue(viewAlias),\n                                 pgvalue(column.alias),\n                                 pgvalue(i + 1),\n                                 pgvalue(column.column.type),\n                                 pgvalue(column.column.allowNull ? 1 : 0),\n                                 pgvalue(view.table.form_id),\n                                 pgvalue(field),\n                                 pgvalue(fieldType),\n                                 pgvalue(dataName),\n                                 pgvalue(part),\n                                 pgvalue(data)));\n        }\n      }\n    }\n\n    return statements.map(s => {\n      return new sqldiff.SchemaChange('raw', {sql: s});\n    });\n  }\n}\n"]}