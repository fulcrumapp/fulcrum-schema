{"version":3,"sources":["../src/metadata.js"],"names":["pgvalue","value","toString","replace","Metadata","diff","options","includeColumns","useAliases","build","generator","changes","differ","oldViews","oldSchema","views","newViews","newSchema","shouldEmitMetadata","Array","prototype","push","apply","buildStatements","oldName","form","name","newName","length","viewName","tablePrefix","statements","METADATA","schemaChangesTableName","Utils","tableName","schema","prefix","quote","systemTablesName","systemTablesViewName","systemColumnsName","systemColumnsViewName","view","viewAlias","alias","table","viewType","type","variant","element","parentViewName","parent","find","v","form_id","key","data_name","i","columns","column","field","fieldType","dataName","part","data","suffix","allowNull","map","s","sqldiff","SchemaChange","sql"],"mappings":"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","sourcesContent":["// import pgformat from 'pg-format';\nimport {format} from 'util';\nimport Utils from './utils';\nimport sqldiff from 'sqldiff';\n\nfunction pgvalue(value) {\n  if (value == null) {\n    return 'NULL';\n  }\n  return \"'\" + value.toString().replace(/'/g, \"''\") + \"'\";\n}\n\nexport default class Metadata {\n  constructor(diff, options) {\n    this.options = options || {};\n    this.includeColumns = this.options.includeColumns == null ? true : this.options.includeColumns;\n    this.useAliases = this.options.useAliases == null ? true : this.options.useAliases;\n  }\n\n  build(generator, changes) {\n    this.diff = generator.differ;\n    this.changes = changes;\n    this.oldViews = this.diff.oldSchema ? this.diff.oldSchema.views : [];\n    this.oldViews = this.oldViews || [];\n\n    this.newViews = this.diff.newSchema ? this.diff.newSchema.views : [];\n    this.newViews = this.newViews || [];\n\n    if (this.shouldEmitMetadata()) {\n      Array.prototype.push.apply(changes, this.buildStatements());\n    }\n  }\n\n  shouldEmitMetadata() {\n    const oldName = this.diff.oldSchema && this.diff.oldSchema.form ? this.diff.oldSchema.form.name : null;\n    const newName = this.diff.newSchema && this.diff.newSchema.form ? this.diff.newSchema.form.name : null;\n\n    // emit the metadata statements if there are already some changes being emitted or\n    // the form name changed.\n    return (this.changes.length > 0 || oldName !== newName);\n  }\n\n  viewName(name) {\n    return (this.options.tablePrefix || '') + name;\n  }\n\n  buildStatements() {\n    const statements = [];\n\n    const METADATA = false;\n\n    const schemaChangesTableName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'schema_changes');\n    const systemTablesName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables');\n    const systemTablesViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables_view');\n    const systemColumnsName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns');\n    const systemColumnsViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns_view');\n\n    if (METADATA) {\n      statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text NOT NULL, created_at timestamp with time zone NOT NULL, sql TEXT NOT NULL);',\n                             schemaChangesTableName));\n\n      statements.push(format('CREATE UNIQUE INDEX ON %s (name);',\n                             schemaChangesTableName));\n\n      statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text, alias text, type text, parent text, form_id text, field text, field_type text, data_name text);',\n                             systemTablesName));\n\n      statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT alias AS name, type, parent, form_id, field, field_type, data_name FROM %s;',\n                             systemTablesViewName, systemTablesName));\n\n      statements.push(format('CREATE INDEX idx_tables_name ON %s (name);',\n                             systemTablesName));\n\n      statements.push(format('CREATE INDEX idx_tables_alias ON %s (alias);',\n                             systemTablesName));\n\n      if (this.includeColumns) {\n        // field type\n        statements.push(format('CREATE TABLE IF NOT EXISTS %s (table_name text, table_alias text, name text, ordinal bigint, type text, nullable boolean, form_id text, field text, field_type text, data_name text, part text, data text);',\n                               systemColumnsName));\n\n        statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT table_alias AS table_name, name, ordinal, type, nullable, form_id, field, field_type, data_name, part FROM %s;',\n                               systemColumnsViewName, systemColumnsName));\n\n        statements.push(format('CREATE INDEX idx_columns_table_name ON %s (table_name);',\n                               systemColumnsName));\n\n        statements.push(format('CREATE INDEX idx_columns_table_alias ON %s (table_alias);',\n                               systemColumnsName));\n      }\n    }\n\n    // drop old metadata\n    for (const view of this.oldViews) {\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(view.name)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(view.name)));\n      }\n    }\n\n    // create new metadata\n    for (const view of this.newViews) {\n      const viewName = this.viewName(view.name);\n      const viewAlias = view.alias || view.table.alias;\n      const viewType = view.type || view.table.type;\n\n      // skip the _full and 'values' tables\n      if (viewType === 'values' || view.variant != null) {\n        continue;\n      }\n\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(viewName)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(viewName)));\n      }\n\n      let element = view.element || view.table.element;\n\n      let parentViewName = null;\n\n      const {parent} = view.table;\n\n      if (parent) {\n        if (this.useAliases) {\n          parentViewName = parent.alias;\n        } else {\n          parentViewName = this.newViews.find(v => v.table === parent && v.variant == null).name;\n        }\n      }\n\n      statements.push(format('INSERT INTO %s (name, alias, type, parent, form_id, field, field_type, data_name) SELECT %s, %s, %s, %s, %s, %s, %s, %s;',\n                             systemTablesName,\n                             pgvalue(viewName),\n                             pgvalue(viewAlias),\n                             pgvalue(viewType),\n                             pgvalue(parentViewName),\n                             pgvalue(view.table.form_id),\n                             pgvalue(element ? element.key : null),\n                             pgvalue(element ? element.type : null),\n                             pgvalue(element ? element.data_name : null)));\n\n      if (this.includeColumns) {\n        for (let i = 0; i < view.columns.length; ++i) {\n          const column = view.columns[i];\n\n          // statements.push(format('DELETE FROM %s WHERE table_name = %s AND name = %s;',\n          //                        systemColumnsName,\n          //                        pgvalue(viewName),\n          //                        pgvalue(column.alias)));\n\n          let field = null;\n          let fieldType = null;\n          let dataName = null;\n          let part = null;\n          const data = null;\n\n          element = column.column.element;\n\n          if (element) {\n            field = element.key;\n            fieldType = element.type;\n            dataName = element.data_name;\n            part = column.column.suffix ? column.column.suffix.replace(/^_/, '') : null;\n            // data = JSON.stringify(element);\n          }\n\n          statements.push(format('INSERT INTO %s (table_name, table_alias, name, ordinal, type, nullable, form_id, field, field_type, data_name, part, data)\\n' +\n                                 'SELECT %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s;',\n                                 systemColumnsName,\n                                 pgvalue(viewName),\n                                 pgvalue(viewAlias),\n                                 pgvalue(column.alias),\n                                 pgvalue(i + 1),\n                                 pgvalue(column.column.type),\n                                 pgvalue(column.column.allowNull ? 1 : 0),\n                                 pgvalue(view.table.form_id),\n                                 pgvalue(field),\n                                 pgvalue(fieldType),\n                                 pgvalue(dataName),\n                                 pgvalue(part),\n                                 pgvalue(data)));\n        }\n      }\n    }\n\n    return statements.map(s => {\n      return new sqldiff.SchemaChange('raw', {sql: s});\n    });\n  }\n}\n"],"file":"metadata.js"}