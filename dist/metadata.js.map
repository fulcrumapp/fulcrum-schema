{"version":3,"sources":["../src/metadata.js"],"names":[],"mappings":"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","file":"metadata.js","sourcesContent":["// import pgformat from 'pg-format';\nimport {format} from 'util';\nimport Utils from './utils';\nimport sqldiff from 'sqldiff';\n\nfunction pgvalue(value) {\n  if (value == null) {\n    return 'NULL';\n  }\n  return \"'\" + value.toString().replace(/'/g, \"''\") + \"'\";\n}\n\nexport default class Metadata {\n  constructor(diff, options) {\n    this.options = options || {};\n    this.includeColumns = options.columns;\n  }\n\n  build(generator, changes) {\n    this.diff = generator.differ;\n    this.changes = changes;\n    this.oldViews = this.diff.oldSchema ? this.diff.oldSchema.views : [];\n    this.oldViews = this.oldViews || [];\n\n    this.newViews = this.diff.newSchema ? this.diff.newSchema.views : [];\n    this.newViews = this.newViews || [];\n\n    if (this.shouldEmitMetadata()) {\n      Array.prototype.push.apply(changes, this.buildStatements());\n    }\n  }\n\n  shouldEmitMetadata() {\n    const oldName = this.diff.oldSchema && this.diff.oldSchema.form ? this.diff.oldSchema.form.name : null;\n    const newName = this.diff.newSchema && this.diff.newSchema.form ? this.diff.newSchema.form.name : null;\n\n    // emit the metadata statements if there are already some changes being emitted or\n    // the form name changed.\n    return (this.changes.length > 0 || oldName !== newName);\n  }\n\n  buildStatements() {\n    const statements = [];\n\n    const systemTablesName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables');\n    const systemColumnsName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns');\n\n    statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text, type text, parent text, form_id text);',\n                           systemTablesName));\n\n    if (this.includeColumns) {\n      statements.push(format('CREATE TABLE IF NOT EXISTS %s (table_name text, name text, ordinal bigint, type text, nullable boolean, form_id text);',\n                             systemColumnsName));\n    }\n\n    // drop old metadata\n    for (const view of this.oldViews) {\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(view.table.alias)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(view.table.alias)));\n      }\n    }\n\n    // create new metadata\n    for (const view of this.newViews) {\n      const viewAlias = view.alias || view.table.alias;\n      const viewType = view.type || view.table.type;\n\n      // skip the _full and 'values' tables\n      if (viewType === 'values' || view.variant != null) {\n        continue;\n      }\n\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(viewAlias)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(viewAlias)));\n      }\n\n      statements.push(format('INSERT INTO %s (name, type, parent, form_id) SELECT %s, %s, %s, %s;',\n                             systemTablesName,\n                             pgvalue(viewAlias),\n                             pgvalue(viewType),\n                             pgvalue(view.table.parent ? view.table.parent.alias : null),\n                             pgvalue(view.table.form_id)));\n\n      if (this.includeColumns) {\n        for (let i = 0; i < view.columns.length; ++i) {\n          const column = view.columns[i];\n\n          statements.push(format('DELETE FROM %s WHERE table_name = %s AND name = %s;',\n                                 systemColumnsName,\n                                 pgvalue(viewAlias),\n                                 pgvalue(column.alias)));\n\n          statements.push(format('INSERT INTO %s (table_name, name, ordinal, type, nullable, form_id) SELECT %s, %s, %s, %s, %s, %s;',\n                                 systemColumnsName,\n                                 pgvalue(viewAlias),\n                                 pgvalue(column.alias),\n                                 pgvalue(i + 1),\n                                 pgvalue(column.column.type),\n                                 pgvalue(column.column.allowNull ? 1 : 0),\n                                 pgvalue(view.table.form_id)));\n        }\n      }\n    }\n\n    return statements.map(s => {\n      return new sqldiff.SchemaChange('raw', {sql: s});\n    });\n  }\n}\n"]}