{"version":3,"sources":["../src/metadata.js"],"names":["pgvalue","value","toString","replace","Metadata","diff","options","includeColumns","generator","changes","differ","oldViews","oldSchema","views","newViews","newSchema","shouldEmitMetadata","Array","prototype","push","apply","buildStatements","oldName","form","name","newName","length","tablePrefix","statements","systemTablesName","Utils","tableName","schema","prefix","quote","systemColumnsName","view","viewName","viewAlias","alias","table","viewType","type","variant","element","parent","form_id","key","data_name","i","columns","column","field","fieldType","dataName","part","data","suffix","allowNull","map","sqldiff","SchemaChange","sql","s"],"mappings":";;;;;;qjBAAA;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIA,SAAS,IAAb,EAAmB;AACjB,WAAO,MAAP;AACD;AACD,SAAO,MAAMA,MAAMC,QAAN,GAAiBC,OAAjB,CAAyB,IAAzB,EAA+B,IAA/B,CAAN,GAA6C,GAApD;AACD;;IAEoBC,Q;AACnB,oBAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AACzB,SAAKA,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKC,cAAL,GAAsB,KAAKD,OAAL,CAAaC,cAAb,IAA+B,IAA/B,GAAsC,IAAtC,GAA6C,KAAKD,OAAL,CAAaC,cAAhF;AACD;;;;0BAEKC,S,EAAWC,O,EAAS;AACxB,WAAKJ,IAAL,GAAYG,UAAUE,MAAtB;AACA,WAAKD,OAAL,GAAeA,OAAf;AACA,WAAKE,QAAL,GAAgB,KAAKN,IAAL,CAAUO,SAAV,GAAsB,KAAKP,IAAL,CAAUO,SAAV,CAAoBC,KAA1C,GAAkD,EAAlE;AACA,WAAKF,QAAL,GAAgB,KAAKA,QAAL,IAAiB,EAAjC;;AAEA,WAAKG,QAAL,GAAgB,KAAKT,IAAL,CAAUU,SAAV,GAAsB,KAAKV,IAAL,CAAUU,SAAV,CAAoBF,KAA1C,GAAkD,EAAlE;AACA,WAAKC,QAAL,GAAgB,KAAKA,QAAL,IAAiB,EAAjC;;AAEA,UAAI,KAAKE,kBAAL,EAAJ,EAA+B;AAC7BC,cAAMC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BX,OAA3B,EAAoC,KAAKY,eAAL,EAApC;AACD;AACF;;;yCAEoB;AACnB,UAAMC,UAAU,KAAKjB,IAAL,CAAUO,SAAV,IAAuB,KAAKP,IAAL,CAAUO,SAAV,CAAoBW,IAA3C,GAAkD,KAAKlB,IAAL,CAAUO,SAAV,CAAoBW,IAApB,CAAyBC,IAA3E,GAAkF,IAAlG;AACA,UAAMC,UAAU,KAAKpB,IAAL,CAAUU,SAAV,IAAuB,KAAKV,IAAL,CAAUU,SAAV,CAAoBQ,IAA3C,GAAkD,KAAKlB,IAAL,CAAUU,SAAV,CAAoBQ,IAApB,CAAyBC,IAA3E,GAAkF,IAAlG;;AAEA;AACA;AACA,aAAQ,KAAKf,OAAL,CAAaiB,MAAb,GAAsB,CAAtB,IAA2BJ,YAAYG,OAA/C;AACD;;;6BAEQD,I,EAAM;AACb,aAAO,CAAC,KAAKlB,OAAL,CAAaqB,WAAb,IAA4B,EAA7B,IAAmCH,IAA1C;AACD;;;sCAEiB;AAChB,UAAMI,aAAa,EAAnB;;AAEA,UAAMC,mBAAmBC,gBAAMC,SAAN,CAAgB,KAAKzB,OAAL,CAAa0B,MAA7B,EAAqC,KAAK1B,OAAL,CAAa2B,MAAlD,EAA0D,KAAK3B,OAAL,CAAa4B,KAAvE,EAA8E,QAA9E,CAAzB;AACA;AACA,UAAMC,oBAAoBL,gBAAMC,SAAN,CAAgB,KAAKzB,OAAL,CAAa0B,MAA7B,EAAqC,KAAK1B,OAAL,CAAa2B,MAAlD,EAA0D,KAAK3B,OAAL,CAAa4B,KAAvE,EAA8E,SAA9E,CAA1B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AAnCgB;AAAA;AAAA;;AAAA;AAoChB,6BAAmB,KAAKvB,QAAxB,8HAAkC;AAAA,cAAvByB,IAAuB;;AAChCR,qBAAWT,IAAX,CAAgB,kBAAO,iCAAP,EACOU,gBADP,EAEO7B,QAAQoC,KAAKZ,IAAb,CAFP,CAAhB;;AAIA,cAAI,KAAKjB,cAAT,EAAyB;AACvBqB,uBAAWT,IAAX,CAAgB,kBAAO,uCAAP,EACOgB,iBADP,EAEOnC,QAAQoC,KAAKZ,IAAb,CAFP,CAAhB;AAGD;AACF;;AAED;AAhDgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAiDhB,8BAAmB,KAAKV,QAAxB,mIAAkC;AAAA,cAAvBsB,KAAuB;;AAChC,cAAMC,WAAW,KAAKA,QAAL,CAAcD,MAAKZ,IAAnB,CAAjB;AACA,cAAMc,YAAYF,MAAKG,KAAL,IAAcH,MAAKI,KAAL,CAAWD,KAA3C;AACA,cAAME,WAAWL,MAAKM,IAAL,IAAaN,MAAKI,KAAL,CAAWE,IAAzC;;AAEA;AACA,cAAID,aAAa,QAAb,IAAyBL,MAAKO,OAAL,IAAgB,IAA7C,EAAmD;AACjD;AACD;;AAEDf,qBAAWT,IAAX,CAAgB,kBAAO,iCAAP,EACOU,gBADP,EAEO7B,QAAQqC,QAAR,CAFP,CAAhB;;AAIA,cAAI,KAAK9B,cAAT,EAAyB;AACvBqB,uBAAWT,IAAX,CAAgB,kBAAO,uCAAP,EACOgB,iBADP,EAEOnC,QAAQqC,QAAR,CAFP,CAAhB;AAGD;;AAED,cAAIO,UAAUR,MAAKQ,OAAL,IAAgBR,MAAKI,KAAL,CAAWI,OAAzC;;AAEAhB,qBAAWT,IAAX,CAAgB,kBAAO,0HAAP,EACOU,gBADP,EAEO7B,QAAQqC,QAAR,CAFP,EAGOrC,QAAQsC,SAAR,CAHP,EAIOtC,QAAQyC,QAAR,CAJP,EAKOzC,QAAQoC,MAAKI,KAAL,CAAWK,MAAX,GAAoBT,MAAKI,KAAL,CAAWK,MAAX,CAAkBN,KAAtC,GAA8C,IAAtD,CALP,EAMOvC,QAAQoC,MAAKI,KAAL,CAAWM,OAAnB,CANP,EAOO9C,QAAQ4C,UAAUA,QAAQG,GAAlB,GAAwB,IAAhC,CAPP,EAQO/C,QAAQ4C,UAAUA,QAAQF,IAAlB,GAAyB,IAAjC,CARP,EASO1C,QAAQ4C,UAAUA,QAAQI,SAAlB,GAA8B,IAAtC,CATP,CAAhB;;AAWA,cAAI,KAAKzC,cAAT,EAAyB;AACvB,iBAAK,IAAI0C,IAAI,CAAb,EAAgBA,IAAIb,MAAKc,OAAL,CAAaxB,MAAjC,EAAyC,EAAEuB,CAA3C,EAA8C;AAC5C,kBAAME,SAASf,MAAKc,OAAL,CAAaD,CAAb,CAAf;;AAEA;AACA;AACA;AACA;;AAEA,kBAAIG,QAAQ,IAAZ;AACA,kBAAIC,YAAY,IAAhB;AACA,kBAAIC,WAAW,IAAf;AACA,kBAAIC,OAAO,IAAX;AACA,kBAAMC,OAAO,IAAb;;AAEAZ,wBAAUO,OAAOA,MAAP,CAAcP,OAAxB;;AAEA,kBAAIA,OAAJ,EAAa;AACXQ,wBAAQR,QAAQG,GAAhB;AACAM,4BAAYT,QAAQF,IAApB;AACAY,2BAAWV,QAAQI,SAAnB;AACAO,uBAAOJ,OAAOA,MAAP,CAAcM,MAAd,GAAuBN,OAAOA,MAAP,CAAcM,MAAd,CAAqBtD,OAArB,CAA6B,IAA7B,EAAmC,EAAnC,CAAvB,GAAgE,IAAvE;AACA;AACD;;AAEDyB,yBAAWT,IAAX,CAAgB,kBAAO,iIACA,wDADP,EAEOgB,iBAFP,EAGOnC,QAAQqC,QAAR,CAHP,EAIOrC,QAAQsC,SAAR,CAJP,EAKOtC,QAAQmD,OAAOZ,KAAf,CALP,EAMOvC,QAAQiD,IAAI,CAAZ,CANP,EAOOjD,QAAQmD,OAAOA,MAAP,CAAcT,IAAtB,CAPP,EAQO1C,QAAQmD,OAAOA,MAAP,CAAcO,SAAd,GAA0B,CAA1B,GAA8B,CAAtC,CARP,EASO1D,QAAQoC,MAAKI,KAAL,CAAWM,OAAnB,CATP,EAUO9C,QAAQoD,KAAR,CAVP,EAWOpD,QAAQqD,SAAR,CAXP,EAYOrD,QAAQsD,QAAR,CAZP,EAaOtD,QAAQuD,IAAR,CAbP,EAcOvD,QAAQwD,IAAR,CAdP,CAAhB;AAeD;AACF;AACF;AA5He;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8HhB,aAAO5B,WAAW+B,GAAX,CAAe,aAAK;AACzB,eAAO,IAAIC,kBAAQC,YAAZ,CAAyB,KAAzB,EAAgC,EAACC,KAAKC,CAAN,EAAhC,CAAP;AACD,OAFM,CAAP;AAGD;;;;;;kBAlKkB3D,Q","file":"metadata.js","sourcesContent":["// import pgformat from 'pg-format';\nimport {format} from 'util';\nimport Utils from './utils';\nimport sqldiff from 'sqldiff';\n\nfunction pgvalue(value) {\n  if (value == null) {\n    return 'NULL';\n  }\n  return \"'\" + value.toString().replace(/'/g, \"''\") + \"'\";\n}\n\nexport default class Metadata {\n  constructor(diff, options) {\n    this.options = options || {};\n    this.includeColumns = this.options.includeColumns == null ? true : this.options.includeColumns;\n  }\n\n  build(generator, changes) {\n    this.diff = generator.differ;\n    this.changes = changes;\n    this.oldViews = this.diff.oldSchema ? this.diff.oldSchema.views : [];\n    this.oldViews = this.oldViews || [];\n\n    this.newViews = this.diff.newSchema ? this.diff.newSchema.views : [];\n    this.newViews = this.newViews || [];\n\n    if (this.shouldEmitMetadata()) {\n      Array.prototype.push.apply(changes, this.buildStatements());\n    }\n  }\n\n  shouldEmitMetadata() {\n    const oldName = this.diff.oldSchema && this.diff.oldSchema.form ? this.diff.oldSchema.form.name : null;\n    const newName = this.diff.newSchema && this.diff.newSchema.form ? this.diff.newSchema.form.name : null;\n\n    // emit the metadata statements if there are already some changes being emitted or\n    // the form name changed.\n    return (this.changes.length > 0 || oldName !== newName);\n  }\n\n  viewName(name) {\n    return (this.options.tablePrefix || '') + name;\n  }\n\n  buildStatements() {\n    const statements = [];\n\n    const systemTablesName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables');\n    // const systemTablesViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables_view');\n    const systemColumnsName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns');\n    // const systemColumnsViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns_view');\n\n    // statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text, alias text, type text, parent text, form_id text, field text, field_type text, data_name text);',\n    //                        systemTablesName));\n\n    // statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT alias AS name, type, parent, form_id, field, field_type, data_name FROM %s;',\n    //                        systemTablesViewName, systemTablesName));\n\n    // statements.push(format('CREATE INDEX idx_tables_name ON %s (name);',\n    //                        systemTablesName));\n\n    // statements.push(format('CREATE INDEX idx_tables_alias ON %s (alias);',\n    //                        systemTablesName));\n\n    // if (this.includeColumns) {\n    //   // field type\n    //   statements.push(format('CREATE TABLE IF NOT EXISTS %s (table_name text, table_alias text, name text, ordinal bigint, type text, nullable boolean, form_id text, field text, field_type text, data_name text, part text, data text);',\n    //                          systemColumnsName));\n\n    //   statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT table_alias AS table_name, name, ordinal, type, nullable, form_id, field, field_type, data_name, part FROM %s;',\n    //                          systemColumnsViewName, systemColumnsName));\n\n    //   statements.push(format('CREATE INDEX idx_columns_table_name ON %s (table_name);',\n    //                          systemColumnsName));\n\n    //   statements.push(format('CREATE INDEX idx_columns_table_alias ON %s (table_alias);',\n    //                          systemColumnsName));\n    // }\n\n    // drop old metadata\n    for (const view of this.oldViews) {\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(view.name)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(view.name)));\n      }\n    }\n\n    // create new metadata\n    for (const view of this.newViews) {\n      const viewName = this.viewName(view.name);\n      const viewAlias = view.alias || view.table.alias;\n      const viewType = view.type || view.table.type;\n\n      // skip the _full and 'values' tables\n      if (viewType === 'values' || view.variant != null) {\n        continue;\n      }\n\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(viewName)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(viewName)));\n      }\n\n      let element = view.element || view.table.element;\n\n      statements.push(format('INSERT INTO %s (name, alias, type, parent, form_id, field, field_type, data_name) SELECT %s, %s, %s, %s, %s, %s, %s, %s;',\n                             systemTablesName,\n                             pgvalue(viewName),\n                             pgvalue(viewAlias),\n                             pgvalue(viewType),\n                             pgvalue(view.table.parent ? view.table.parent.alias : null),\n                             pgvalue(view.table.form_id),\n                             pgvalue(element ? element.key : null),\n                             pgvalue(element ? element.type : null),\n                             pgvalue(element ? element.data_name : null)));\n\n      if (this.includeColumns) {\n        for (let i = 0; i < view.columns.length; ++i) {\n          const column = view.columns[i];\n\n          // statements.push(format('DELETE FROM %s WHERE table_name = %s AND name = %s;',\n          //                        systemColumnsName,\n          //                        pgvalue(viewName),\n          //                        pgvalue(column.alias)));\n\n          let field = null;\n          let fieldType = null;\n          let dataName = null;\n          let part = null;\n          const data = null;\n\n          element = column.column.element;\n\n          if (element) {\n            field = element.key;\n            fieldType = element.type;\n            dataName = element.data_name;\n            part = column.column.suffix ? column.column.suffix.replace(/^_/, '') : null;\n            // data = JSON.stringify(element);\n          }\n\n          statements.push(format('INSERT INTO %s (table_name, table_alias, name, ordinal, type, nullable, form_id, field, field_type, data_name, part, data)\\n' +\n                                 'SELECT %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s;',\n                                 systemColumnsName,\n                                 pgvalue(viewName),\n                                 pgvalue(viewAlias),\n                                 pgvalue(column.alias),\n                                 pgvalue(i + 1),\n                                 pgvalue(column.column.type),\n                                 pgvalue(column.column.allowNull ? 1 : 0),\n                                 pgvalue(view.table.form_id),\n                                 pgvalue(field),\n                                 pgvalue(fieldType),\n                                 pgvalue(dataName),\n                                 pgvalue(part),\n                                 pgvalue(data)));\n        }\n      }\n    }\n\n    return statements.map(s => {\n      return new sqldiff.SchemaChange('raw', {sql: s});\n    });\n  }\n}\n"]}