{"version":3,"sources":["../src/metadata.js"],"names":["pgvalue","value","toString","replace","Metadata","diff","options","includeColumns","useAliases","generator","changes","differ","oldViews","oldSchema","views","newViews","newSchema","shouldEmitMetadata","Array","prototype","push","apply","buildStatements","oldName","form","name","newName","length","tablePrefix","statements","METADATA","schemaChangesTableName","Utils","tableName","schema","prefix","quote","systemTablesName","systemTablesViewName","systemColumnsName","systemColumnsViewName","view","viewName","viewAlias","alias","table","viewType","type","variant","element","parentViewName","parent","find","v","form_id","key","data_name","i","columns","column","field","fieldType","dataName","part","data","suffix","allowNull","map","sqldiff","SchemaChange","sql","s"],"mappings":"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","file":"metadata.js","sourcesContent":["// import pgformat from 'pg-format';\nimport {format} from 'util';\nimport Utils from './utils';\nimport sqldiff from 'sqldiff';\n\nfunction pgvalue(value) {\n  if (value == null) {\n    return 'NULL';\n  }\n  return \"'\" + value.toString().replace(/'/g, \"''\") + \"'\";\n}\n\nexport default class Metadata {\n  constructor(diff, options) {\n    this.options = options || {};\n    this.includeColumns = this.options.includeColumns == null ? true : this.options.includeColumns;\n    this.useAliases = this.options.useAliases == null ? true : this.options.useAliases;\n  }\n\n  build(generator, changes) {\n    this.diff = generator.differ;\n    this.changes = changes;\n    this.oldViews = this.diff.oldSchema ? this.diff.oldSchema.views : [];\n    this.oldViews = this.oldViews || [];\n\n    this.newViews = this.diff.newSchema ? this.diff.newSchema.views : [];\n    this.newViews = this.newViews || [];\n\n    if (this.shouldEmitMetadata()) {\n      Array.prototype.push.apply(changes, this.buildStatements());\n    }\n  }\n\n  shouldEmitMetadata() {\n    const oldName = this.diff.oldSchema && this.diff.oldSchema.form ? this.diff.oldSchema.form.name : null;\n    const newName = this.diff.newSchema && this.diff.newSchema.form ? this.diff.newSchema.form.name : null;\n\n    // emit the metadata statements if there are already some changes being emitted or\n    // the form name changed.\n    return (this.changes.length > 0 || oldName !== newName);\n  }\n\n  viewName(name) {\n    return (this.options.tablePrefix || '') + name;\n  }\n\n  buildStatements() {\n    const statements = [];\n\n    const METADATA = true;\n\n    const schemaChangesTableName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'schema_changes');\n    const systemTablesName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables');\n    const systemTablesViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'tables_view');\n    const systemColumnsName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns');\n    const systemColumnsViewName = Utils.tableName(this.options.schema, this.options.prefix, this.options.quote, 'columns_view');\n\n    if (METADATA) {\n      statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text NOT NULL, created_at timestamp with time zone NOT NULL, sql TEXT NOT NULL);',\n                             schemaChangesTableName));\n\n      statements.push(format('CREATE UNIQUE INDEX ON %s (name);',\n                             schemaChangesTableName));\n\n      statements.push(format('CREATE TABLE IF NOT EXISTS %s (name text, alias text, type text, parent text, form_id text, field text, field_type text, data_name text);',\n                             systemTablesName));\n\n      statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT alias AS name, type, parent, form_id, field, field_type, data_name FROM %s;',\n                             systemTablesViewName, systemTablesName));\n\n      statements.push(format('CREATE INDEX idx_tables_name ON %s (name);',\n                             systemTablesName));\n\n      statements.push(format('CREATE INDEX idx_tables_alias ON %s (alias);',\n                             systemTablesName));\n\n      if (this.includeColumns) {\n        // field type\n        statements.push(format('CREATE TABLE IF NOT EXISTS %s (table_name text, table_alias text, name text, ordinal bigint, type text, nullable boolean, form_id text, field text, field_type text, data_name text, part text, data text);',\n                               systemColumnsName));\n\n        statements.push(format('CREATE OR REPLACE VIEW %s AS SELECT table_alias AS table_name, name, ordinal, type, nullable, form_id, field, field_type, data_name, part FROM %s;',\n                               systemColumnsViewName, systemColumnsName));\n\n        statements.push(format('CREATE INDEX idx_columns_table_name ON %s (table_name);',\n                               systemColumnsName));\n\n        statements.push(format('CREATE INDEX idx_columns_table_alias ON %s (table_alias);',\n                               systemColumnsName));\n      }\n    }\n\n    // drop old metadata\n    for (const view of this.oldViews) {\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(view.name)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(view.name)));\n      }\n    }\n\n    // create new metadata\n    for (const view of this.newViews) {\n      const viewName = this.viewName(view.name);\n      const viewAlias = view.alias || view.table.alias;\n      const viewType = view.type || view.table.type;\n\n      // skip the _full and 'values' tables\n      if (viewType === 'values' || view.variant != null) {\n        continue;\n      }\n\n      statements.push(format('DELETE FROM %s WHERE name = %s;',\n                             systemTablesName,\n                             pgvalue(viewName)));\n\n      if (this.includeColumns) {\n        statements.push(format('DELETE FROM %s WHERE table_name = %s;',\n                               systemColumnsName,\n                               pgvalue(viewName)));\n      }\n\n      let element = view.element || view.table.element;\n\n      let parentViewName = null;\n\n      const {parent} = view.table;\n\n      if (parent) {\n        if (this.useAliases) {\n          parentViewName = parent.alias;\n        } else {\n          parentViewName = this.newViews.find(v => v.table === parent && v.variant == null).name;\n        }\n      }\n\n      statements.push(format('INSERT INTO %s (name, alias, type, parent, form_id, field, field_type, data_name) SELECT %s, %s, %s, %s, %s, %s, %s, %s;',\n                             systemTablesName,\n                             pgvalue(viewName),\n                             pgvalue(viewAlias),\n                             pgvalue(viewType),\n                             pgvalue(parentViewName),\n                             pgvalue(view.table.form_id),\n                             pgvalue(element ? element.key : null),\n                             pgvalue(element ? element.type : null),\n                             pgvalue(element ? element.data_name : null)));\n\n      if (this.includeColumns) {\n        for (let i = 0; i < view.columns.length; ++i) {\n          const column = view.columns[i];\n\n          // statements.push(format('DELETE FROM %s WHERE table_name = %s AND name = %s;',\n          //                        systemColumnsName,\n          //                        pgvalue(viewName),\n          //                        pgvalue(column.alias)));\n\n          let field = null;\n          let fieldType = null;\n          let dataName = null;\n          let part = null;\n          const data = null;\n\n          element = column.column.element;\n\n          if (element) {\n            field = element.key;\n            fieldType = element.type;\n            dataName = element.data_name;\n            part = column.column.suffix ? column.column.suffix.replace(/^_/, '') : null;\n            // data = JSON.stringify(element);\n          }\n\n          statements.push(format('INSERT INTO %s (table_name, table_alias, name, ordinal, type, nullable, form_id, field, field_type, data_name, part, data)\\n' +\n                                 'SELECT %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s;',\n                                 systemColumnsName,\n                                 pgvalue(viewName),\n                                 pgvalue(viewAlias),\n                                 pgvalue(column.alias),\n                                 pgvalue(i + 1),\n                                 pgvalue(column.column.type),\n                                 pgvalue(column.column.allowNull ? 1 : 0),\n                                 pgvalue(view.table.form_id),\n                                 pgvalue(field),\n                                 pgvalue(fieldType),\n                                 pgvalue(dataName),\n                                 pgvalue(part),\n                                 pgvalue(data)));\n        }\n      }\n    }\n\n    return statements.map(s => {\n      return new sqldiff.SchemaChange('raw', {sql: s});\n    });\n  }\n}\n"]}