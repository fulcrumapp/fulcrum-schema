{"version":3,"sources":["../src/utils.js"],"names":["Utils","schema","prefix","quote","table","escapedSchema","escape","length","identifier","escaped","replace","RegExp","elements","recurseRepeatables","assignParent","parent","flat","element","push","recurse","type","children","flattenElements","Array","prototype","apply"],"mappings":";;;;;;;;;;IAAqBA,K;;;;;;;8BACFC,M,EAAQC,M,EAAQC,K,EAAOC,K,EAAO;AAC7C,aAAOJ,MAAMK,aAAN,CAAoBJ,MAApB,EAA4BE,KAA5B,IAAqCH,MAAMM,MAAN,CAAa,CAACJ,UAAU,EAAX,IAAiBE,KAA9B,EAAqCD,KAArC,CAA5C;AACD;;;kCAEoBF,M,EAAQE,K,EAAO;AAClC,UAAIF,UAAU,IAAV,IAAkBA,OAAOM,MAAP,KAAkB,CAAxC,EAA2C;AACzC,eAAO,EAAP;AACD;;AAED,aAAOP,MAAMM,MAAN,CAAaL,MAAb,EAAqBE,KAArB,IAA8B,GAArC;AACD;;;2BAEaK,U,EAAYL,K,EAAO;AAC/B,UAAIK,cAAc,IAAd,IAAsBA,WAAWD,MAAX,KAAsB,CAAhD,EAAmD;AACjD,eAAO,EAAP;AACD;;AAEDJ,cAAQA,SAAS,GAAjB;;AAEA,UAAMM,UAAUD,WAAWE,OAAX,CAAmB,IAAIC,MAAJ,CAAWR,KAAX,EAAkB,GAAlB,CAAnB,EAA2CA,QAAQA,KAAnD,CAAhB;;AAEA,aAAOA,QAAQM,OAAR,GAAkBN,KAAzB;AACD;;;oCAEsBS,Q,EAAUC,kB,EAAoBC,Y,EAAcC,M,EAAQ;AACzE,UAAIF,sBAAsB,IAA1B,EAAgC;AAC9BA,6BAAqB,IAArB;AACD;;AAED,UAAIC,gBAAgB,IAApB,EAA0B;AACxBA,uBAAe,KAAf;AACD;;AAED,UAAME,OAAO,EAAb;;AATyE;AAAA;AAAA;;AAAA;AAWzE,6BAAsBJ,QAAtB,8HAAgC;AAAA,cAArBK,OAAqB;;AAC9B,cAAIH,YAAJ,EAAkB;AAChBG,oBAAQF,MAAR,GAAiBA,MAAjB;AACD;;AAEDC,eAAKE,IAAL,CAAUD,OAAV;;AAEA,cAAIE,UAAU,IAAd;;AAEA,cAAI,CAACN,kBAAD,IAAuBI,QAAQG,IAAR,KAAiB,YAA5C,EAA0D;AACxDD,sBAAU,KAAV;AACD;;AAED,cAAIA,WAAWF,QAAQL,QAAvB,EAAiC;AAC/B,gBAAMS,WAAWrB,MAAMsB,eAAN,CAAsBL,QAAQL,QAA9B,EAAwCC,kBAAxC,EAA4DC,YAA5D,EAA0EG,OAA1E,CAAjB;AACAM,kBAAMC,SAAN,CAAgBN,IAAhB,CAAqBO,KAArB,CAA2BT,IAA3B,EAAiCK,QAAjC;AACD;AACF;AA5BwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BzE,aAAOL,IAAP;AACD;;;;;;kBAxDkBhB,K","file":"utils.js","sourcesContent":["export default class Utils {\n  static tableName(schema, prefix, quote, table) {\n    return Utils.escapedSchema(schema, quote) + Utils.escape((prefix || '') + table, quote);\n  }\n\n  static escapedSchema(schema, quote) {\n    if (schema == null || schema.length === 0) {\n      return '';\n    }\n\n    return Utils.escape(schema, quote) + '.';\n  }\n\n  static escape(identifier, quote) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    quote = quote || '\"';\n\n    const escaped = identifier.replace(new RegExp(quote, 'g'), quote + quote);\n\n    return quote + escaped + quote;\n  }\n\n  static flattenElements(elements, recurseRepeatables, assignParent, parent) {\n    if (recurseRepeatables == null) {\n      recurseRepeatables = true;\n    }\n\n    if (assignParent == null) {\n      assignParent = false;\n    }\n\n    const flat = [];\n\n    for (const element of elements) {\n      if (assignParent) {\n        element.parent = parent;\n      }\n\n      flat.push(element);\n\n      let recurse = true;\n\n      if (!recurseRepeatables && element.type === 'Repeatable') {\n        recurse = false;\n      }\n\n      if (recurse && element.elements) {\n        const children = Utils.flattenElements(element.elements, recurseRepeatables, assignParent, element);\n        Array.prototype.push.apply(flat, children);\n      }\n    }\n\n    return flat;\n  }\n}\n"]}