{"version":3,"sources":["../src/schema.js"],"names":[],"mappings":"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","file":"schema.js","sourcesContent":["import _ from 'underscore';\nimport Utils from './utils';\nimport sqldiff from 'sqldiff';\nimport {format} from 'util';\nimport DataElements from './data-elements';\n\nconst {Table, View} = sqldiff;\n\nexport default class Schema {\n  constructor(form, columns, options) {\n    this.prefix = 'f';\n    this.form = form;\n    this.columns = columns;\n    this.options = options || {};\n    this.elements = Utils.flattenElements(this.form.elements, false);\n    this.schemaElements = DataElements.find(this.elements);\n    this.buildSchema();\n  }\n\n  buildSchema() {\n    this.tables = [];\n    this.views = [];\n\n    this.formTable = this.buildFormTable();\n    this.valuesTable = this.buildValuesTable();\n\n    this.tables.push(this.formTable);\n    this.tables.push(this.valuesTable);\n\n    this.buildDataColumns();\n\n    this.buildViews();\n\n    this.buildIndexes();\n  }\n\n  alias(part, escapePart = true) {\n    if (part) {\n      const partName = escapePart ? this.escapeDataName(part) : part;\n\n      return this.escapeSlashes(this.form.name) + '/' + this.escapeSlashes(partName);\n    }\n    return this.escapeSlashes(this.form.name);\n  }\n\n  escapeDataName(dataName) {\n    // if a data name starts with an underscore, add an additional underscore to prevent\n    // collisions with future system-defined columns. e.g. `_symbol` becomes `__symbol`\n    // because at some point we might add a system column named `symbol` which needs the\n    // `_symbol` name.\n    if (dataName && dataName[0] === '_') {\n      return '_' + dataName;\n    }\n\n    return dataName || 'no_data_name';\n  }\n\n  escapeSlashes(name) {\n    return name.replace(/\\//g, '\\\\/');\n  }\n\n  buildFormTable() {\n    const table = new Table(format('form_%s', this.form.row_id),\n                            null,\n                            {type: 'form', alias: this.alias(), form_id: this.form.id});\n\n    for (const column of this.columns.systemFormTableColumns) {\n      const formColumn = _.clone(column);\n\n      formColumn.system = true;\n\n      table.addColumn(formColumn);\n    }\n\n    return table;\n  }\n\n  buildValuesTable() {\n    const table = new Table(format('form_%s_values', this.form.row_id),\n                            null,\n                            {type: 'values', alias: this.alias('values'), form_id: this.form.id});\n\n    for (const column of this.columns.systemValuesTableColumns) {\n      const valueColumn = _.clone(column);\n\n      valueColumn.system = true;\n\n      table.addColumn(valueColumn);\n    }\n\n    return table;\n  }\n\n  buildRepeatableTable(parentTable, element) {\n    const table = new Table(this.formTable.id + '_' + element.key,\n                            null,\n                            {type: 'repeatable', parent: parentTable, element: element, alias: this.alias(element.data_name), form_id: this.form.id});\n\n    for (const column of this.columns.systemRepeatableTableColumns) {\n      const attrs = _.clone(column);\n\n      attrs.id = element.key + '_' + column.name;\n      attrs.system = true;\n\n      table.addColumn(attrs);\n    }\n\n    return table;\n  }\n\n  buildDataColumns() {\n    for (const element of this.schemaElements) {\n      this.processElement(element, this.formTable);\n    }\n  }\n\n  buildViews() {\n    this.viewColumns = {};\n\n    for (const table of this.tables) {\n      const view = new View(table.name + '_view', null, table);\n\n      this.buildViewForTable(table, view);\n\n      this.views.push(view);\n\n      if (table.type === 'form') {\n        const fullView = new View(table.name + '_view_full', null, table, {variant: 'full', alias: this.alias('_full', false)});\n\n        this.buildViewForTable(table, fullView);\n\n        this.views.push(fullView);\n      } else if (table.type === 'repeatable') {\n        const fullView = new View(table.name + '_view_full', null, table, {variant: 'full',\n                                                                           alias: this.alias(table.element.data_name) + '/_full'});\n\n        this.buildViewForTable(table, fullView);\n\n        this.views.push(fullView);\n      }\n    }\n  }\n\n  buildViewForTable(table, view) {\n    const columnNames = {};\n\n    for (const column of table.columns) {\n      const alias = this.viewColumnName(view, table, column);\n\n      if (alias == null) {\n        continue;\n      }\n\n      if (!columnNames[alias]) {\n        view.addColumn({column: column, alias: alias});\n        columnNames[alias] = column;\n      }\n    }\n  }\n\n  buildIndexes() {\n    for (const table of this.tables) {\n      let indexDefinitions = [];\n\n      if (table.type === 'form') {\n        indexDefinitions = this.columns.systemFormTableIndexes;\n      } else if (table.type === 'repeatable') {\n        indexDefinitions = this.columns.systemRepeatableTableIndexes;\n      } else if (table.type === 'values') {\n        indexDefinitions = this.columns.systemValuesTableIndexes;\n      }\n\n      for (const index of indexDefinitions) {\n        const indexDefinition = _.clone(index);\n\n        table.addIndex(indexDefinition);\n      }\n    }\n  }\n\n  viewColumnName(view, table, column) {\n    let name = null;\n\n    if (column.system) {\n      if (table.type === 'form') {\n        if (view.variant === 'full') {\n          name = this.columns.systemFormFullViewColumns[column.name];\n        } else {\n          name = this.columns.systemFormViewColumns[column.name];\n        }\n      } else if (table.type === 'repeatable') {\n        if (view.variant === 'full') {\n          name = this.columns.systemRepeatableFullViewColumns[column.name];\n        } else {\n          name = this.columns.systemRepeatableViewColumns[column.name];\n        }\n      } else if (table.type === 'values') {\n        name = this.columns.systemValuesViewColumns[column.name];\n      }\n\n      if (name == null) {\n        return null;\n      }\n\n      name = '_' + name;\n    } else if (column.element) {\n      name = this.escapeDataName(column.element.data_name) + (column.suffix || '');\n    }\n\n    if (name) {\n      // dedupe any columns\n      name = this.launderViewColumnName(view, column, name);\n    }\n\n    return name;\n  }\n\n  launderViewColumnName(view, column, name) {\n    const views = this.viewColumns;\n\n    views[view.name] = views[view.name] || {};\n\n    let count = 1;\n\n    const rawName = name.substring(0, 63).toLowerCase();\n    let newName = rawName;\n\n    while (views[view.name][newName]) {\n      newName = rawName.substring(0, 63 - (count.toString().length)) + count;\n      count++;\n    }\n\n    views[view.name][newName] = column;\n\n    return newName;\n  }\n\n  processElement(element, elementTable) {\n    switch (element.type) {\n      case 'TextField':\n        if (element.numeric) {\n          this.addDoubleElement(elementTable, element);\n        } else {\n          this.addStringElement(elementTable, element);\n        }\n        break;\n\n      case 'ChoiceField':\n        if (element.multiple) {\n          this.addArrayElement(elementTable, element);\n        } else {\n          this.addStringElement(elementTable, element);\n        }\n        break;\n\n      case 'ClassificationField':\n        this.addArrayElement(elementTable, element);\n        break;\n\n      case 'YesNoField':\n        this.addStringElement(elementTable, element);\n        break;\n\n      case 'PhotoField':\n      case 'VideoField':\n      case 'AudioField':\n        this.addMediaElement(elementTable, element);\n        break;\n\n      case 'SignatureField':\n        this.addStringElement(elementTable, element);\n        this.addTimestampElement(elementTable, element, 'timestamp');\n        break;\n\n      case 'BarcodeField':\n        this.addStringElement(elementTable, element);\n        break;\n\n      case 'DateTimeField':\n      case 'DateField':\n        this.addDateElement(elementTable, element);\n        break;\n\n      case 'TimeField':\n        this.addTimeElement(elementTable, element);\n        break;\n\n      case 'Repeatable':\n        this.addRepeatableElement(elementTable, element);\n        break;\n\n      case 'AddressField':\n        this.addStringElement(elementTable, element);\n        this.addStringElement(elementTable, element, 'sub_thoroughfare');\n        this.addStringElement(elementTable, element, 'thoroughfare');\n        this.addStringElement(elementTable, element, 'suite');\n        this.addStringElement(elementTable, element, 'locality');\n        this.addStringElement(elementTable, element, 'admin_area');\n        this.addStringElement(elementTable, element, 'postal_code');\n        this.addStringElement(elementTable, element, 'sub_admin_area');\n        this.addStringElement(elementTable, element, 'country');\n        break;\n\n      case 'HyperlinkField':\n        this.addStringElement(elementTable, element);\n        break;\n\n      case 'RecordLinkField':\n        this.addRecordLinkElement(elementTable, element);\n        break;\n\n      case 'CalculatedField':\n        switch (element.display.style) {\n          case 'number':\n          case 'date':\n          case 'currency':\n            this.addDoubleElement(elementTable, element);\n            break;\n          default:\n            this.addStringElement(elementTable, element);\n            break;\n        }\n        break;\n\n      default:\n        console.log('Unhandled element type', element.type);\n        break;\n    }\n  }\n\n  addStringElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'string', suffix);\n  }\n\n  addDateElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'date', suffix);\n  }\n\n  addTimeElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'time', suffix);\n  }\n\n  addTimestampElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'timestamp', suffix);\n  }\n\n  addDoubleElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'double', suffix);\n  }\n\n  addIntegerElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'integer', suffix);\n  }\n\n  addArrayElement(table, element, suffix) {\n    if (suffix == null) {\n      suffix = '';\n    }\n    return this.addElement(table, element, 'array', suffix);\n  }\n\n  addElement(table, element, type, suffix) {\n    let column = null;\n\n    if (suffix == null) {\n      suffix = '';\n    }\n\n    if (suffix) {\n      suffix = '_' + suffix;\n    }\n\n    column = {\n      id: this.prefix + element.key + suffix,\n      type: type,\n      element: element,\n      suffix: suffix\n    };\n\n    table.addColumn(column);\n  }\n\n  addMediaElement(table, element) {\n    this.addArrayElement(table, element);\n\n    if (this.columns.includeMediaCaptions !== false) {\n      this.addArrayElement(table, element, 'captions');\n    }\n\n    const value = element.key.replace(/'/g, \"''\");\n\n    const clause = format('WHERE key = \\'%s\\'', value);\n\n    const filter = {\n      key: value\n    };\n\n    const alias = {\n      PhotoField: '_photo_id',\n      VideoField: '_video_id',\n      AudioField: '_audio_id'\n    }[element.type];\n\n    if (alias) {\n      const view = new View(this.formTable.id + '_' + element.key + '_view',\n                            null, this.valuesTable, {type: 'media', element: element, clause: clause, filter, alias: this.alias(element.data_name)});\n\n      view.addColumn({column: {name: 'record_resource_id', type: 'string'}, alias: 'record_id'});\n      view.addColumn({column: {name: 'parent_resource_id', type: 'string'}, alias: 'parent_id'});\n      view.addColumn({column: {name: 'text_value', type: 'string'}, alias: alias});\n\n      this.views.push(view);\n    }\n  }\n\n  addRecordLinkElement(parentTable, element) {\n    this.addArrayElement(parentTable, element);\n\n    const value = element.key.replace(/'/g, \"''\");\n\n    const clause = format('WHERE key = \\'%s\\'', value);\n\n    const view = new View(this.formTable.id + '_' + element.key + '_view',\n                          null, this.valuesTable, {type: 'link', element: element, clause: clause, alias: this.alias(element.data_name)});\n\n    view.addColumn({column: {name: 'record_resource_id', type: 'string'}, alias: 'source_record_id'});\n    view.addColumn({column: {name: 'parent_resource_id', type: 'string'}, alias: 'parent_id'});\n    view.addColumn({column: {name: 'text_value', type: 'string'}, alias: 'linked_record_id'});\n\n    this.views.push(view);\n  }\n\n  addRepeatableElement(parentTable, element) {\n    const childTable = this.buildRepeatableTable(parentTable, element);\n\n    this.tables.push(childTable);\n\n    const elements = Utils.flattenElements(element.elements, false);\n\n    const childElements = DataElements.find(elements);\n\n    for (const childElement of childElements) {\n      this.processElement(childElement, childTable);\n    }\n  }\n}\n"]}