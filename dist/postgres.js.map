{"version":3,"sources":["../src/postgres.js"],"names":["require","Postgres","sqldiff","SchemaDiffer","instance","Function","oldForm","newForm","schema","tablePrefix","generateSQL","differ","includeMetadata","meta","Metadata","quote","includeColumns","gen","afterTransform","build","bind","tableSchema","generate","compareOrganization","oldSchema","newSchema","oldOrganization","OrganizationSchema","OrganizationSchemaV2","newOrganization","compareForms","Schema","FormSchemaV2","err","Error","stack","toString","compareFormSchemas","options","module","exports"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAPAA,QAAQ,gBAAR;;IASQC,Q,GAA2BC,iB,CAA3BD,Q;IAAUE,Y,GAAiBD,iB,CAAjBC,Y;;;AAElB,IAAMC,WAAWC,SAAS,aAAT,GAAjB,C,CAA4C;;AAE5CD,SAASE,OAAT,GAAmB,IAAnB;AACAF,SAASG,OAAT,GAAmB,IAAnB;AACAH,SAASI,MAAT,GAAkB,IAAlB;AACAJ,SAASK,WAAT,GAAuB,IAAvB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,eAA7B,EAA8C;AAC5C,MAAMC,OAAO,IAAIC,kBAAJ,CAAaH,MAAb,EAAqB,EAAEI,OAAO,GAAT,EAAcP,QAAQJ,SAASI,MAA/B,EAAuCQ,gBAAgB,IAAvD,EAArB,CAAb;;AAEA,MAAMC,MAAM,IAAIhB,QAAJ,CAAaU,MAAb,EAAqB,EAAEO,gBAAgBN,kBAAkBC,KAAKM,KAAL,CAAWC,IAAX,CAAgBP,IAAhB,CAAlB,GAA0C,IAA5D,EAArB,CAAZ;;AAEAI,MAAII,WAAJ,GAAkBjB,SAASI,MAAT,IAAmB,EAArC;AACAS,MAAIR,WAAJ,GAAkBL,SAASK,WAAT,IAAwB,EAA1C;;AAEA,SAAOQ,IAAIK,QAAJ,EAAP;AACD;;AAEDlB,SAASmB,mBAAT,GAA+B,YAAM;AACnC,MAAIC,YAAY,IAAhB;AACA,MAAIC,YAAY,IAAhB;;AAEA,MAAIrB,SAASsB,eAAb,EAA8B;AAC5BF,gBAAY,IAAIG,4BAAJ,CAAuBC,wBAAvB,CAAZ;AACD;;AAED,MAAIxB,SAASyB,eAAb,EAA8B;AAC5BJ,gBAAY,IAAIE,4BAAJ,CAAuBC,wBAAvB,CAAZ;AACD;;AAED,MAAMjB,SAAS,IAAIR,YAAJ,CAAiBqB,SAAjB,EAA4BC,SAA5B,CAAf;;AAEA,SAAOf,YAAYC,MAAZ,EAAoB,IAApB,CAAP;AACD,CAfD;;AAiBA,IAAMmB,eAAe,SAAfA,YAAe,GAAM;AACzB,MAAI;AACF,QAAIN,YAAY,IAAhB;AACA,QAAIC,YAAY,IAAhB;;AAEA,QAAIrB,SAASE,OAAb,EAAsB;AACpBkB,kBAAY,IAAIO,gBAAJ,CAAW3B,SAASE,OAApB,EAA6B0B,WAA7B,EAA2C,IAA3C,CAAZ;AACD;;AAED,QAAI5B,SAASG,OAAb,EAAsB;AACpBkB,kBAAY,IAAIM,gBAAJ,CAAW3B,SAASG,OAApB,EAA6ByB,WAA7B,EAA2C,IAA3C,CAAZ;AACD;;AAED,QAAMrB,SAAS,IAAIR,YAAJ,CAAiBqB,SAAjB,EAA4BC,SAA5B,CAAf;;AAEA,WAAOf,YAAYC,MAAZ,EAAoB,IAApB,CAAP;AACD,GAfD,CAeE,OAAOsB,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,IAAIE,KAAJ,CAAUC,QAAV,EAAV,CAAN;AACD;AACF,CAnBD;;AAqBA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAAC/B,OAAD,EAAUC,OAAV,EAAoC;AAAA,MAAjB+B,OAAiB,uEAAP,EAAO;;AAC7DlC,WAASE,OAAT,GAAmBA,OAAnB;AACAF,WAASG,OAAT,GAAmBA,OAAnB;AACAH,WAASI,MAAT,GAAkB8B,QAAQ9B,MAA1B;AACAJ,WAASK,WAAT,GAAuB6B,QAAQ7B,WAA/B;;AAEA,SAAOL,SAAS0B,YAAT,EAAP;AACD,CAPD;;AASA1B,SAAS0B,YAAT;AACA1B,SAASiC,kBAAT;;AAEAE,OAAOC,OAAP,GAAiBpC,QAAjB","file":"postgres.js","sourcesContent":["require('babel-polyfill');\n\nimport OrganizationSchema from './organization-schema';\nimport Schema from './schema';\nimport OrganizationSchemaV2 from './schemas/postgres-schema';\nimport FormSchemaV2 from './schemas/v2';\nimport Metadata from './metadata';\nimport sqldiff from 'sqldiff';\n\nconst { Postgres, SchemaDiffer } = sqldiff;\n\nconst instance = Function('return this')(); // eslint-disable-line no-new-func\n\ninstance.oldForm = null;\ninstance.newForm = null;\ninstance.schema = null;\ninstance.tablePrefix = null;\n\nfunction generateSQL(differ, includeMetadata) {\n  const meta = new Metadata(differ, { quote: '\"', schema: instance.schema, includeColumns: true });\n\n  const gen = new Postgres(differ, { afterTransform: includeMetadata ? meta.build.bind(meta) : null });\n\n  gen.tableSchema = instance.schema || '';\n  gen.tablePrefix = instance.tablePrefix || '';\n\n  return gen.generate();\n}\n\ninstance.compareOrganization = () => {\n  let oldSchema = null;\n  let newSchema = null;\n\n  if (instance.oldOrganization) {\n    oldSchema = new OrganizationSchema(OrganizationSchemaV2);\n  }\n\n  if (instance.newOrganization) {\n    newSchema = new OrganizationSchema(OrganizationSchemaV2);\n  }\n\n  const differ = new SchemaDiffer(oldSchema, newSchema);\n\n  return generateSQL(differ, true);\n};\n\nconst compareForms = () => {\n  try {\n    let oldSchema = null;\n    let newSchema = null;\n\n    if (instance.oldForm) {\n      oldSchema = new Schema(instance.oldForm, FormSchemaV2, null);\n    }\n\n    if (instance.newForm) {\n      newSchema = new Schema(instance.newForm, FormSchemaV2, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    return generateSQL(differ, true);\n  } catch (err) {\n    throw new Error(err.stack.toString());\n  }\n};\n\nconst compareFormSchemas = (oldForm, newForm, options = {}) => {\n  instance.oldForm = oldForm;\n  instance.newForm = newForm;\n  instance.schema = options.schema;\n  instance.tablePrefix = options.tablePrefix;\n\n  return instance.compareForms();\n};\n\ninstance.compareForms;\ninstance.compareFormSchemas;\n\nmodule.exports = instance;\n"]}