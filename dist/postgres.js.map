{"version":3,"sources":["../src/postgres.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,CAAC,gBAAgB,CAAC,CAAC;;IAQnB,QAAQ,qBAAR,QAAQ;IAAE,YAAY,qBAAZ,YAAY;;AAE7B,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,EAAE;;AAAC,AAEzC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;AACxB,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;AACxB,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;;AAEvB,SAAS,WAAW,CAAC,MAAM,EAAE;AAC3B,MAAM,IAAI,GAAG,uBAAa,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAC,CAAC,CAAC;;AAEzE,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,EAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;;AAE1E,KAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC;;AAElC,SAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;CACvB;;AAED,QAAQ,CAAC,mBAAmB,GAAG,YAAY;AACzC,MAAI,SAAS,GAAG,IAAI,CAAC;AACrB,MAAI,SAAS,GAAG,IAAI,CAAC;;AAErB,MAAI,QAAQ,CAAC,eAAe,EAAE;AAC5B,aAAS,GAAG,0DAA0B,CAAC;GACxC;;AAED,MAAI,QAAQ,CAAC,eAAe,EAAE;AAC5B,aAAS,GAAG,0DAA0B,CAAC;GACxC;;AAED,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;;AAEtD,SAAO,WAAW,CAAC,MAAM,CAAC,CAAC;CAC5B,CAAC;;AAEF,QAAQ,CAAC,YAAY,GAAG,YAAY;AAClC,MAAI;AACF,QAAI,SAAS,GAAG,IAAI,CAAC;AACrB,QAAI,SAAS,GAAG,IAAI,CAAC;;AAErB,QAAI,QAAQ,CAAC,OAAO,EAAE;AACpB,eAAS,GAAG,qBAAW,QAAQ,CAAC,OAAO,4BAAM,IAAI,CAAC,CAAC;KACpD;;AAED,QAAI,QAAQ,CAAC,OAAO,EAAE;AACpB,eAAS,GAAG,qBAAW,QAAQ,CAAC,OAAO,4BAAM,IAAI,CAAC,CAAC;KACpD;;AAED,QAAM,MAAM,GAAG,IAAI,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;;AAEtD,WAAO,WAAW,CAAC,MAAM,CAAC,CAAC;GAC5B,CAAC,OAAO,GAAG,EAAE;AACZ,UAAM,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;GACvC;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"postgres.js","sourcesContent":["require('babel-polyfill');\n\nimport OrganizationSchema from './organization-schema';\nimport Schema from './schema';\nimport V2 from './schemas/postgres-query-v2';\nimport Metadata from './metadata';\nimport sqldiff from 'sqldiff';\n\nconst {Postgres, SchemaDiffer} = sqldiff;\n\nlet instance = Function('return this')(); // eslint-disable-line no-new-func\n\ninstance.oldForm = null;\ninstance.newForm = null;\ninstance.schema = null;\n\nfunction generateSQL(differ) {\n  const meta = new Metadata(differ, {quote: '\"', schema: instance.schema});\n\n  const gen = new Postgres(differ, {afterTransform: meta.build.bind(meta)});\n\n  gen.tableSchema = instance.schema;\n\n  return gen.generate();\n}\n\ninstance.compareOrganization = function () {\n  let oldSchema = null;\n  let newSchema = null;\n\n  if (instance.oldOrganization) {\n    oldSchema = new OrganizationSchema(V2);\n  }\n\n  if (instance.newOrganization) {\n    newSchema = new OrganizationSchema(V2);\n  }\n\n  const differ = new SchemaDiffer(oldSchema, newSchema);\n\n  return generateSQL(differ);\n};\n\ninstance.compareForms = function () {\n  try {\n    let oldSchema = null;\n    let newSchema = null;\n\n    if (instance.oldForm) {\n      oldSchema = new Schema(instance.oldForm, V2, null);\n    }\n\n    if (instance.newForm) {\n      newSchema = new Schema(instance.newForm, V2, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    return generateSQL(differ);\n  } catch (err) {\n    throw new Error(err.stack.toString());\n  }\n};\n\nmodule.exports = instance;\n"]}