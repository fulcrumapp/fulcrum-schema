{"version":3,"sources":["../src/postgres.js"],"names":[],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AANA,QAAQ,gBAAR;;IAQO,Q,qBAAA,Q;IAAU,Y,qBAAA,Y;;;AAEjB,IAAM,WAAW,SAAS,aAAT,GAAjB,C;;AAEA,SAAS,OAAT,GAAmB,IAAnB;AACA,SAAS,OAAT,GAAmB,IAAnB;AACA,SAAS,MAAT,GAAkB,IAAlB;;AAEA,SAAS,WAAT,CAAqB,MAArB,EAA6B,eAA7B,EAA8C;AAC5C,MAAM,OAAO,uBAAa,MAAb,EAAqB,EAAC,OAAO,GAAR,EAAa,QAAQ,SAAS,MAA9B,EAArB,CAAb;;AAEA,MAAM,MAAM,IAAI,QAAJ,CAAa,MAAb,EAAqB,EAAC,gBAAgB,kBAAkB,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB,CAAlB,GAA0C,IAA3D,EAArB,CAAZ;;AAEA,MAAI,WAAJ,GAAkB,SAAS,MAA3B;;AAEA,SAAO,IAAI,QAAJ,EAAP;AACD;;AAED,SAAS,mBAAT,GAA+B,YAAM;AACnC,MAAI,YAAY,IAAhB;AACA,MAAI,YAAY,IAAhB;;AAEA,MAAI,SAAS,eAAb,EAA8B;AAC5B,gBAAY,0DAAZ;AACD;;AAED,MAAI,SAAS,eAAb,EAA8B;AAC5B,gBAAY,0DAAZ;AACD;;AAED,MAAM,SAAS,IAAI,YAAJ,CAAiB,SAAjB,EAA4B,SAA5B,CAAf;;AAEA,SAAO,YAAY,MAAZ,EAAoB,KAApB,CAAP;AACD,CAfD;;AAiBA,SAAS,YAAT,GAAwB,YAAM;AAC5B,MAAI;AACF,QAAI,YAAY,IAAhB;AACA,QAAI,YAAY,IAAhB;;AAEA,QAAI,SAAS,OAAb,EAAsB;AACpB,kBAAY,qBAAW,SAAS,OAApB,4BAAiC,IAAjC,CAAZ;AACD;;AAED,QAAI,SAAS,OAAb,EAAsB;AACpB,kBAAY,qBAAW,SAAS,OAApB,4BAAiC,IAAjC,CAAZ;AACD;;AAED,QAAM,SAAS,IAAI,YAAJ,CAAiB,SAAjB,EAA4B,SAA5B,CAAf;;AAEA,WAAO,YAAY,MAAZ,CAAP;AACD,GAfD,CAeE,OAAO,GAAP,EAAY;AACZ,UAAM,IAAI,KAAJ,CAAU,IAAI,KAAJ,CAAU,QAAV,EAAV,CAAN;AACD;AACF,CAnBD;;AAqBA,OAAO,OAAP,GAAiB,QAAjB","file":"postgres.js","sourcesContent":["require('babel-polyfill');\n\nimport OrganizationSchema from './organization-schema';\nimport Schema from './schema';\nimport V2 from './schemas/postgres-schema';\nimport Metadata from './metadata';\nimport sqldiff from 'sqldiff';\n\nconst {Postgres, SchemaDiffer} = sqldiff;\n\nconst instance = Function('return this')(); // eslint-disable-line no-new-func\n\ninstance.oldForm = null;\ninstance.newForm = null;\ninstance.schema = null;\n\nfunction generateSQL(differ, includeMetadata) {\n  const meta = new Metadata(differ, {quote: '\"', schema: instance.schema});\n\n  const gen = new Postgres(differ, {afterTransform: includeMetadata ? meta.build.bind(meta) : null});\n\n  gen.tableSchema = instance.schema;\n\n  return gen.generate();\n}\n\ninstance.compareOrganization = () => {\n  let oldSchema = null;\n  let newSchema = null;\n\n  if (instance.oldOrganization) {\n    oldSchema = new OrganizationSchema(V2);\n  }\n\n  if (instance.newOrganization) {\n    newSchema = new OrganizationSchema(V2);\n  }\n\n  const differ = new SchemaDiffer(oldSchema, newSchema);\n\n  return generateSQL(differ, false);\n};\n\ninstance.compareForms = () => {\n  try {\n    let oldSchema = null;\n    let newSchema = null;\n\n    if (instance.oldForm) {\n      oldSchema = new Schema(instance.oldForm, V2, null);\n    }\n\n    if (instance.newForm) {\n      newSchema = new Schema(instance.newForm, V2, null);\n    }\n\n    const differ = new SchemaDiffer(oldSchema, newSchema);\n\n    return generateSQL(differ);\n  } catch (err) {\n    throw new Error(err.stack.toString());\n  }\n};\n\nmodule.exports = instance;\n"]}